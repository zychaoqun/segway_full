#!/usr/bin/env python


"""
This script is used to force the machine into balance mode. Balance mode is very
dangerous if you do not understand the system dynamics, the operational model and
the potential hazards to avoid when balancing. This can all be learned from the 
manual. 

To enter balance (220 only), run this script (rosrun segway_ros segway_test_balancing).

The machine will start to beep indicating that it is waiting for the balance entry
criteria to be met. The criteria are:

1. Balance mode must be unlocked, it is locked by default
2. The platform must be in standby mode to make the transition to balance mode
3. The PSE must be initialized, which requires the machine be at less that 35deg pitch
4. The pitch angle must cross through 0 deg (machine upright)
5. The pitch rate must be low (ie don't fling the machine back, slowly tilt it back to upright)

Slowly tilt the machine back, the beeping rate will increase as zero pitch is approached. Once zero
pitch has been crossed the machine will enter balance mode. Immediately let go.

READ THE MANUAL ABOUT HAZARDS AND FULLY UNDERSTAND THE OPERATING PRINCIPLES OF BALANCING BEFORE ATTEMPTING!!!!!!!!

"""


"""--------------------------------------------------------------------
COPYRIGHT 2014 Stanley Innovation Inc.

Software License Agreement:

The software supplied herewith by Stanley Innovation Inc. (the "Company") 
for its licensed Segway RMP Robotic Platforms is intended and supplied to you, 
the Company's customer, for use solely and exclusively with Stanley Innovation 
products. The software is owned by the Company and/or its supplier, and is 
protected under applicable copyright laws.  All rights are reserved. Any use in 
violation of the foregoing restrictions may subject the user to criminal 
sanctions under applicable laws, as well as to civil liability for the 
breach of the terms and conditions of this license. The Company may 
immediately terminate this Agreement upon your use of the software with 
any products that are not Stanley Innovation products.

The software was written using Python programming language.  Your use 
of the software is therefore subject to the terms and conditions of the 
OSI- approved open source license viewable at http://www.python.org/.  
You are solely responsible for ensuring your compliance with the Python 
open source license.

You shall indemnify, defend and hold the Company harmless from any claims, 
demands, liabilities or expenses, including reasonable attorneys fees, incurred 
by the Company as a result of any claim or proceeding against the Company 
arising out of or based upon: 

(i) The combination, operation or use of the software by you with any hardware, 
    products, programs or data not supplied or approved in writing by the Company, 
    if such claim or proceeding would have been avoided but for such combination, 
    operation or use.
 
(ii) The modification of the software by or on behalf of you 

(iii) Your use of the software.

 THIS SOFTWARE IS PROVIDED IN AN "AS IS" CONDITION. NO WARRANTIES,
 WHETHER EXPRESS, IMPLIED OR STATUTORY, INCLUDING, BUT NOT LIMITED
 TO, IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
 PARTICULAR PURPOSE APPLY TO THIS SOFTWARE. THE COMPANY SHALL NOT,
 IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL OR
 CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 
 \file   segway_test_balancing

 \brief  Tests balance mode with the 220

 \Platform: Linux/ROS Indigo
--------------------------------------------------------------------"""
from segway.system_defines import *
from dynamic_reconfigure.client import Client
from dynamic_reconfigure.msg import Config
from segway_msgs.msg import *
import rospy

class TestBalance(object):
    def __init__(self):
    
        rospy.loginfo("waiting for segway dynamic reconfigure server....")
        rospy.wait_for_message('/segway/segway_driver/parameter_updates', Config) 
    
        rospy.loginfo("Unlocking balance mode")
        client= Client("/segway",timeout=1.0)
        changes = dict({"balance_mode_enabled":True})
        config = client.update_configuration(changes)
        client.close()
    
        
        
        self.cfg_cmd = ConfigCmd()
        self.cfg_pub = rospy.Publisher('/segway/gp_command', ConfigCmd, queue_size=10)
        
        
        self._operational_mode = 0
        self._state_fb = rospy.Subscriber("/segway/feedback/status", Status, self._update_status)
        
        r = rospy.Rate(1)
        rospy.loginfo("Putting platform in standbymode")
        while not (3 == self._operational_mode):
            rospy.loginfo("Making attempt to put platform in standby mode(3) it is in %d"%self._operational_mode)
            self.cfg_cmd.header.stamp = rospy.get_rostime()
            self.cfg_cmd.gp_cmd = 'GENERAL_PURPOSE_CMD_SET_OPERATIONAL_MODE'
            self.cfg_cmd.gp_param = STANDBY_REQUEST
            self.cfg_pub.publish(self.cfg_cmd)
            self.cfg_cmd.header.seq+=1
            r.sleep()
            
        r = rospy.Rate(2)
        rospy.loginfo("Putting platform in balance mode")
        while not (5 == self._operational_mode):
            rospy.loginfo("Making attempt to put platform in balance mode(3) it is in %d"%self._operational_mode)
            rospy.loginfo("Once the platform starts beeping slowly tip it back past vertical to enter balance mode")
            self.cfg_cmd.header.stamp = rospy.get_rostime()
            self.cfg_cmd.gp_cmd = 'GENERAL_PURPOSE_CMD_SET_OPERATIONAL_MODE'
            self.cfg_cmd.gp_param = BALANCE_REQUEST
            self.cfg_pub.publish(self.cfg_cmd)
            self.cfg_cmd.header.seq+=1
            r.sleep()
            
       rospy.loginfo("Platform has entered balance mode successfully!!!!")        
        
        
    def _update_status(self,data):
    
        self._operational_mode = data.operational_state


if __name__=='__main__':

    rospy.init_node('segway_test_balancing')
    TestBalance()
    rospy.loginfo('Done')
    

    
    
    
    
    
    



